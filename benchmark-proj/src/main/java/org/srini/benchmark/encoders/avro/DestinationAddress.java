/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.srini.benchmark.encoders.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DestinationAddress extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4460809973464943812L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DestinationAddress\",\"namespace\":\"org.srini.benchmark.encoders.avro\",\"fields\":[{\"name\":\"BankCode\",\"type\":\"string\"},{\"name\":\"CountryCode\",\"type\":\"string\"},{\"name\":\"LocationCode\",\"type\":\"string\"},{\"name\":\"LogicalTerminalCode\",\"type\":\"int\"},{\"name\":\"BranchCode\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DestinationAddress> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DestinationAddress> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DestinationAddress> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DestinationAddress> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DestinationAddress> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DestinationAddress to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DestinationAddress from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DestinationAddress instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DestinationAddress fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence BankCode;
  private java.lang.CharSequence CountryCode;
  private java.lang.CharSequence LocationCode;
  private int LogicalTerminalCode;
  private java.lang.CharSequence BranchCode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DestinationAddress() {}

  /**
   * All-args constructor.
   * @param BankCode The new value for BankCode
   * @param CountryCode The new value for CountryCode
   * @param LocationCode The new value for LocationCode
   * @param LogicalTerminalCode The new value for LogicalTerminalCode
   * @param BranchCode The new value for BranchCode
   */
  public DestinationAddress(java.lang.CharSequence BankCode, java.lang.CharSequence CountryCode, java.lang.CharSequence LocationCode, java.lang.Integer LogicalTerminalCode, java.lang.CharSequence BranchCode) {
    this.BankCode = BankCode;
    this.CountryCode = CountryCode;
    this.LocationCode = LocationCode;
    this.LogicalTerminalCode = LogicalTerminalCode;
    this.BranchCode = BranchCode;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return BankCode;
    case 1: return CountryCode;
    case 2: return LocationCode;
    case 3: return LogicalTerminalCode;
    case 4: return BranchCode;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: BankCode = (java.lang.CharSequence)value$; break;
    case 1: CountryCode = (java.lang.CharSequence)value$; break;
    case 2: LocationCode = (java.lang.CharSequence)value$; break;
    case 3: LogicalTerminalCode = (java.lang.Integer)value$; break;
    case 4: BranchCode = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'BankCode' field.
   * @return The value of the 'BankCode' field.
   */
  public java.lang.CharSequence getBankCode() {
    return BankCode;
  }


  /**
   * Sets the value of the 'BankCode' field.
   * @param value the value to set.
   */
  public void setBankCode(java.lang.CharSequence value) {
    this.BankCode = value;
  }

  /**
   * Gets the value of the 'CountryCode' field.
   * @return The value of the 'CountryCode' field.
   */
  public java.lang.CharSequence getCountryCode() {
    return CountryCode;
  }


  /**
   * Sets the value of the 'CountryCode' field.
   * @param value the value to set.
   */
  public void setCountryCode(java.lang.CharSequence value) {
    this.CountryCode = value;
  }

  /**
   * Gets the value of the 'LocationCode' field.
   * @return The value of the 'LocationCode' field.
   */
  public java.lang.CharSequence getLocationCode() {
    return LocationCode;
  }


  /**
   * Sets the value of the 'LocationCode' field.
   * @param value the value to set.
   */
  public void setLocationCode(java.lang.CharSequence value) {
    this.LocationCode = value;
  }

  /**
   * Gets the value of the 'LogicalTerminalCode' field.
   * @return The value of the 'LogicalTerminalCode' field.
   */
  public int getLogicalTerminalCode() {
    return LogicalTerminalCode;
  }


  /**
   * Sets the value of the 'LogicalTerminalCode' field.
   * @param value the value to set.
   */
  public void setLogicalTerminalCode(int value) {
    this.LogicalTerminalCode = value;
  }

  /**
   * Gets the value of the 'BranchCode' field.
   * @return The value of the 'BranchCode' field.
   */
  public java.lang.CharSequence getBranchCode() {
    return BranchCode;
  }


  /**
   * Sets the value of the 'BranchCode' field.
   * @param value the value to set.
   */
  public void setBranchCode(java.lang.CharSequence value) {
    this.BranchCode = value;
  }

  /**
   * Creates a new DestinationAddress RecordBuilder.
   * @return A new DestinationAddress RecordBuilder
   */
  public static org.srini.benchmark.encoders.avro.DestinationAddress.Builder newBuilder() {
    return new org.srini.benchmark.encoders.avro.DestinationAddress.Builder();
  }

  /**
   * Creates a new DestinationAddress RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DestinationAddress RecordBuilder
   */
  public static org.srini.benchmark.encoders.avro.DestinationAddress.Builder newBuilder(org.srini.benchmark.encoders.avro.DestinationAddress.Builder other) {
    if (other == null) {
      return new org.srini.benchmark.encoders.avro.DestinationAddress.Builder();
    } else {
      return new org.srini.benchmark.encoders.avro.DestinationAddress.Builder(other);
    }
  }

  /**
   * Creates a new DestinationAddress RecordBuilder by copying an existing DestinationAddress instance.
   * @param other The existing instance to copy.
   * @return A new DestinationAddress RecordBuilder
   */
  public static org.srini.benchmark.encoders.avro.DestinationAddress.Builder newBuilder(org.srini.benchmark.encoders.avro.DestinationAddress other) {
    if (other == null) {
      return new org.srini.benchmark.encoders.avro.DestinationAddress.Builder();
    } else {
      return new org.srini.benchmark.encoders.avro.DestinationAddress.Builder(other);
    }
  }

  /**
   * RecordBuilder for DestinationAddress instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DestinationAddress>
    implements org.apache.avro.data.RecordBuilder<DestinationAddress> {

    private java.lang.CharSequence BankCode;
    private java.lang.CharSequence CountryCode;
    private java.lang.CharSequence LocationCode;
    private int LogicalTerminalCode;
    private java.lang.CharSequence BranchCode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.srini.benchmark.encoders.avro.DestinationAddress.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.BankCode)) {
        this.BankCode = data().deepCopy(fields()[0].schema(), other.BankCode);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.CountryCode)) {
        this.CountryCode = data().deepCopy(fields()[1].schema(), other.CountryCode);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.LocationCode)) {
        this.LocationCode = data().deepCopy(fields()[2].schema(), other.LocationCode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.LogicalTerminalCode)) {
        this.LogicalTerminalCode = data().deepCopy(fields()[3].schema(), other.LogicalTerminalCode);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.BranchCode)) {
        this.BranchCode = data().deepCopy(fields()[4].schema(), other.BranchCode);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing DestinationAddress instance
     * @param other The existing instance to copy.
     */
    private Builder(org.srini.benchmark.encoders.avro.DestinationAddress other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.BankCode)) {
        this.BankCode = data().deepCopy(fields()[0].schema(), other.BankCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CountryCode)) {
        this.CountryCode = data().deepCopy(fields()[1].schema(), other.CountryCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.LocationCode)) {
        this.LocationCode = data().deepCopy(fields()[2].schema(), other.LocationCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.LogicalTerminalCode)) {
        this.LogicalTerminalCode = data().deepCopy(fields()[3].schema(), other.LogicalTerminalCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.BranchCode)) {
        this.BranchCode = data().deepCopy(fields()[4].schema(), other.BranchCode);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'BankCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getBankCode() {
      return BankCode;
    }


    /**
      * Sets the value of the 'BankCode' field.
      * @param value The value of 'BankCode'.
      * @return This builder.
      */
    public org.srini.benchmark.encoders.avro.DestinationAddress.Builder setBankCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.BankCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'BankCode' field has been set.
      * @return True if the 'BankCode' field has been set, false otherwise.
      */
    public boolean hasBankCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'BankCode' field.
      * @return This builder.
      */
    public org.srini.benchmark.encoders.avro.DestinationAddress.Builder clearBankCode() {
      BankCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CountryCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountryCode() {
      return CountryCode;
    }


    /**
      * Sets the value of the 'CountryCode' field.
      * @param value The value of 'CountryCode'.
      * @return This builder.
      */
    public org.srini.benchmark.encoders.avro.DestinationAddress.Builder setCountryCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.CountryCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CountryCode' field has been set.
      * @return True if the 'CountryCode' field has been set, false otherwise.
      */
    public boolean hasCountryCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CountryCode' field.
      * @return This builder.
      */
    public org.srini.benchmark.encoders.avro.DestinationAddress.Builder clearCountryCode() {
      CountryCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'LocationCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getLocationCode() {
      return LocationCode;
    }


    /**
      * Sets the value of the 'LocationCode' field.
      * @param value The value of 'LocationCode'.
      * @return This builder.
      */
    public org.srini.benchmark.encoders.avro.DestinationAddress.Builder setLocationCode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.LocationCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'LocationCode' field has been set.
      * @return True if the 'LocationCode' field has been set, false otherwise.
      */
    public boolean hasLocationCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'LocationCode' field.
      * @return This builder.
      */
    public org.srini.benchmark.encoders.avro.DestinationAddress.Builder clearLocationCode() {
      LocationCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'LogicalTerminalCode' field.
      * @return The value.
      */
    public int getLogicalTerminalCode() {
      return LogicalTerminalCode;
    }


    /**
      * Sets the value of the 'LogicalTerminalCode' field.
      * @param value The value of 'LogicalTerminalCode'.
      * @return This builder.
      */
    public org.srini.benchmark.encoders.avro.DestinationAddress.Builder setLogicalTerminalCode(int value) {
      validate(fields()[3], value);
      this.LogicalTerminalCode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'LogicalTerminalCode' field has been set.
      * @return True if the 'LogicalTerminalCode' field has been set, false otherwise.
      */
    public boolean hasLogicalTerminalCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'LogicalTerminalCode' field.
      * @return This builder.
      */
    public org.srini.benchmark.encoders.avro.DestinationAddress.Builder clearLogicalTerminalCode() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'BranchCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getBranchCode() {
      return BranchCode;
    }


    /**
      * Sets the value of the 'BranchCode' field.
      * @param value The value of 'BranchCode'.
      * @return This builder.
      */
    public org.srini.benchmark.encoders.avro.DestinationAddress.Builder setBranchCode(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.BranchCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'BranchCode' field has been set.
      * @return True if the 'BranchCode' field has been set, false otherwise.
      */
    public boolean hasBranchCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'BranchCode' field.
      * @return This builder.
      */
    public org.srini.benchmark.encoders.avro.DestinationAddress.Builder clearBranchCode() {
      BranchCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DestinationAddress build() {
      try {
        DestinationAddress record = new DestinationAddress();
        record.BankCode = fieldSetFlags()[0] ? this.BankCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.CountryCode = fieldSetFlags()[1] ? this.CountryCode : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.LocationCode = fieldSetFlags()[2] ? this.LocationCode : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.LogicalTerminalCode = fieldSetFlags()[3] ? this.LogicalTerminalCode : (java.lang.Integer) defaultValue(fields()[3]);
        record.BranchCode = fieldSetFlags()[4] ? this.BranchCode : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DestinationAddress>
    WRITER$ = (org.apache.avro.io.DatumWriter<DestinationAddress>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DestinationAddress>
    READER$ = (org.apache.avro.io.DatumReader<DestinationAddress>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.BankCode);

    out.writeString(this.CountryCode);

    out.writeString(this.LocationCode);

    out.writeInt(this.LogicalTerminalCode);

    out.writeString(this.BranchCode);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.BankCode = in.readString(this.BankCode instanceof Utf8 ? (Utf8)this.BankCode : null);

      this.CountryCode = in.readString(this.CountryCode instanceof Utf8 ? (Utf8)this.CountryCode : null);

      this.LocationCode = in.readString(this.LocationCode instanceof Utf8 ? (Utf8)this.LocationCode : null);

      this.LogicalTerminalCode = in.readInt();

      this.BranchCode = in.readString(this.BranchCode instanceof Utf8 ? (Utf8)this.BranchCode : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.BankCode = in.readString(this.BankCode instanceof Utf8 ? (Utf8)this.BankCode : null);
          break;

        case 1:
          this.CountryCode = in.readString(this.CountryCode instanceof Utf8 ? (Utf8)this.CountryCode : null);
          break;

        case 2:
          this.LocationCode = in.readString(this.LocationCode instanceof Utf8 ? (Utf8)this.LocationCode : null);
          break;

        case 3:
          this.LogicalTerminalCode = in.readInt();
          break;

        case 4:
          this.BranchCode = in.readString(this.BranchCode instanceof Utf8 ? (Utf8)this.BranchCode : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










